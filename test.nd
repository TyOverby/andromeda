(define andromeda (require "./andromeda.nd.js"))

(define test (lambda (program should)
    (define rem (lambda (str)
        (.replace str (RegExp "\\s+" "g") "")))
    (lambda (t)
        (define compiled (rem (andromeda program)))
        (define noEnd (compiled.substring 0 (- (#length compiled) 1)))
        (t.equals noEnd (rem should))
        (t.done))
))

(set exports.testString1 (test
    "\"hello world\""
    "\"hello world\""))

(set exports.testString2 (test
    "\"\\\""
    "\"\\\""))

(set exports.testNumber1 (test
    "25"
    "25"))

(set exports.testNumber2 (test
    "25.3"
    "25.3"))

(set exports.testNumber3 (test
    "25.0E35"
    "25.0E35"))

(set exports.testQuotIdent1 (test
    "'hello"
    "'hello'"))

(set exports.testLambda1 (test
    "(lambda () 5)"
    "(function () {return 5;})"))

(set exports.testLambda2 (test
    "(lambda (x) x)"
    "(function (x) {return x;})"))

(set exports.testLambda3 (test
    "(lambda (x y) x y)"
    "(function (x, y) {x; return y;})"))

(set exports.testBegin1 (test
    "(begin x y z)"
    "(function () {x; y; return z;})()"))

(set exports.testCond1 (test
    "(cond (f 1) (b 2))"
    "(function (){if(f){return 1;} else if(b){return 2;}})()"))

(set exports.testDefine1 (test
    "(define x 1)"
    "var x = 1;"))

(set exports.testDefine2 (test
    "(define f (lambda (x) x))"
    "var f = (function (x) {return x;});"))

(set exports.testIf1 (test
    "(if x a b)"
    "((x) ? (a) : (b))"))

(set exports.testLet1 (test
    "(let ((a b) (c d)) foo bar)"
    "(function (a,c){foo;return bar;}(b,d))"))

(set exports.testLetrec1 (test
    "(letrec ((a b) (c d)) foo bar)"
    "(function (){var a=b; var c=d; foo;return bar;}())"))

(set exports.testSet1 (test
    "(set a 5)"
    "(a=5)"))

(set exports.testSet1 (test
    "(set this.a 5)"
    "(this.a=5)"))

(set exports.testSwitch1 (test
    "(switch a (b c) (d e) (default 10))"
    "(function () {switch(a){case b: return c; break; case d: return e; break; default: return 10; break;}}())"))

(set exports.testAttribute1 (test
    "(#attr obj)"
    "obj.attr"))

(set exports.testMethod1 (test
    "(.method obj 1 2)"
    "obj.method(1,2)"))

(set exports.testMethod1 (test
    "(.method obj)"
    "obj.method()"))

(set exports.testSexpr1 (test
    "(f)"
    "f()"))

(set exports.testSexpr2 (test
    "(f 1 a b)"
    "f(1,a,b)"))

(set exports.testAddition1 (test
    "(+)"
    "0"))

(set exports.testAddition2 (test
    "(+ 5)"
    "5"))

(set exports.testAddition3 (test
    "(+ 1 2 3 4)"
    "(1+2+3+4)"))

(set exports.testThunk1 (test
    "(thunk 5)"
    "(function () {return 5;})"))


(set exports.testThunk2 (test
    "(thunk (f) 5)"
    "(function () {f(); return 5;})"))

"Regressions"
(set exports.testThrowFailure1 (test
    "(throw SomeError)"
    "throw(SomeError)"))

(set exports.testLambdaFailure1 (test
    "(fn 'lambda)"
    "fn('lambda')"))
